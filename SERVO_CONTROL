#define RDA 0x80
#define TBE 0x20




 volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
 volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
 volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
 volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
 volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;

   volatile unsigned char* my_ADMUX = (unsigned char*) 0x07C;
  volatile unsigned char* my_ADCSRB =(unsigned char*) 0x7B;
  volatile unsigned char* my_ADCSRA =(unsigned char*) 0x7A;
  volatile unsigned char* my_ADC_DATA =(unsigned char*) 0x78;

  
  

 
#include <Servo.h>
Servo servo;

void setup() {

U0init(9600);
adc_init();
servo.attach(12);
servo.write(0);



  
}

void loop(){
  
 
  unsigned int adc_reading = adc_read(1);
  adc_reading = map(adc_reading , 0, 1023, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
  servo.write(adc_reading);   
  delay(20);
 
  
  
}


void adc_init(){
  *my_ADCSRA |= 0x80;
  *my_ADCSRA &= 0xDF;       //0b11010000
   *my_ADCSRA &= 0xF7;
    *my_ADCSRA &= 0xF8;
    
  *my_ADCSRB &= 0xF7;
  *my_ADCSRB &= 0xF8;

  *my_ADMUX &= 0x7F;
  *my_ADMUX |= 0x40;
  *my_ADMUX &= 0xDF;
  *my_ADMUX &= 0xE0;
}

unsigned int adc_read(unsigned char adc_channel_num){
  *my_ADMUX &= 0xE0;
  *my_ADCSRB &= 0xF7;
  *my_ADMUX |= adc_channel_num;
  
  *my_ADCSRA |= 0x40;
  
  while(((*my_ADCSRA & 0x40) != 0));
  return *my_ADC_DATA;
  
}



void U0init(unsigned long U0baud)
{

 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}


unsigned char U0kbhit()
{
  return *myUCSR0A & RDA;
}

unsigned char U0getchar()
{
  return *myUDR0;
  
}

void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0); //write data into USART0
  *myUDR0=U0pdata;
}
